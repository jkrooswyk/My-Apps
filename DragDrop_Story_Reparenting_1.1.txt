<html>
  <head>
    <meta name="Name" content="StoryTree" />
    <meta name="Version" content="1.1" />
    <meta name="Vendor" content="Rally" />
    <!--
    ** This software is provided as an example of funtionality only, 
    ** without guarantee or warranty.
    ** (c) 2010 Rally Software
    -->

    <!-- defined style for tree -->
     <link rel="stylesheet" type="text/css" href="https://ajax.googleapis.com/ajax/libs/dojo/1.4/dijit/themes/soria/soria.css"/>
     
    <script type="text/javascript">
        var djConfig = {
            parseOnLoad: true,
    		modulePaths: {
                "dojo": "https://ajax.googleapis.com/ajax/libs/dojo/1.4.0/dojo",
                "dijit": "https://ajax.googleapis.com/ajax/libs/dojo/1.4.0/dijit",
                "dojox": "https://ajax.googleapis.com/ajax/libs/dojo/1.4.0/dojox" 
            }
		};
    </script>

    <!-- default libraries -->
    <!-- script type="text/javascript" src="/slm/js-lib/dojo/1.3.1/dojo/dojo.js"></script -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.3.2/jquery.min.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/dojo/1.4.0/dojo/dojo.xd.js" djConfig="isDebug: true"> </script>
    <script src="/slm/mashup/1.13/js/batch-toolkit.js"></script>
    <script src="/slm/mashup/1.13/js/dropdown.js"></script>
    <script src="/slm/mashup/1.13/js/utilities.js"></script>

<!-- mashup script -->
    <script>
      jQuery("#mashup_box").append('<img id="spinner" src="/slm/images/icon_spinner.gif"/>');
      dojo.require("dojo.data.ItemFileWriteStore");
      dojo.require("dijit.Tree");
      dojo.require("dijit.tree.dndSource");
      dojo.require("dojo.dnd.Source");

      function dndAccept(source,nodes) {
        return true;
      }

      function treeAcceptance(node,source,position) {
        return true;
      }

      dojo.addOnLoad(function() { 
        /*
        ** a function to do the calls to change the points on the server
        */
        function changeParent(childID, parentID) {
          if ( childID != "-1" ) {
            var url = "__SERVER_URL__/webservice/1.14/hierarchicalrequirement/" + childID + ".js";
            var newEntity = {};
            if ( parentID == "-1" ) {
              newEntity.Parent = null;
              } else {
              newEntity.Parent = "__SERVER_URL__/slm/webservice/1.13/hierarchicalrequirement/" + parentID;
            }
            var sendObject = { "HierarchicalRequirement": newEntity };
  
            jQuery.ajax({
              url: url,
              type: "POST",
              data: dojo.toJson(sendObject),
              dataType: "json",
              contentType: "application/json; charset=utf-8",
              success: function(response) {  
                if ( response.OperationResult.Errors.length > 0 ) {
                  alert ( "Problem saving card: " + response.OperationResult.Errors[0] );
                }
              }
            });
          }
        }

        function populateMashup(results) {
          <!-- read the query results and do stuff -->
          if ( results.errors.stories != null ) {
            if ( results.errors.stories.length > 0 ) {
              alert("Problem acquiring stories: " + results.errors.stories[0]);
            }
          }
          if ( results.errors.parents != null ) {
            if ( results.errors.parents.length > 0 ) {
              alert("Problem acquiring parents: " + results.errors.parents[0]);
            }
          }

          // make an array to check if a child is scoped (i.e., returned
          // by one or the other query)
          var scopedStoryIds = new Array();
          for ( var i=0; i< results.stories.length; i++ ) {
            scopedStoryIds.push( results.stories[i].ObjectID );
          }
          for ( var i=0; i< results.parents.length; i++ ) {
            scopedStoryIds.push( results.parents[i].ObjectID );
          }

          //put all the stories onto the stories container 
          var formattedStories = new Array();

          // TODO:  something for when a child is in a non-scoped project

          // break into parents at the root and the children of those stories
          var rootChildren = new Array();

          for ( var i=0; i<results.parents.length; i++ ) {
            var story = results.parents[i];
            var formattedChildren = new Array();

            for ( var j=0; j<story.Children.length; j++ ) {
              var child = story.Children[j];
              // check if we'll have a node for it
              if ( jQuery.inArray(child.ObjectID, scopedStoryIds) > -1 ) {
                var formattedChild = { _reference: child.ObjectID };
                formattedChildren.push(formattedChild);
              }
            }

            var storyRef = { _reference: story.ObjectID };
            rootChildren.push( storyRef );

            var formattedStory = { };
            formattedStory.id = story.ObjectID;
            formattedStory.FormattedID = story.FormattedID;
            formattedStory.Name = story.Name;
            formattedStory.Type = "parent";
            formattedStory.Children = formattedChildren;
            // put in the array
            formattedStories.push(formattedStory);
          }

          for ( var i=0; i<results.stories.length; i++ ) {
            var story = results.stories[i];
            var formattedChildren = new Array();

            for ( var j=0; j<story.Children.length; j++ ) {
              var child = story.Children[j];
              // check if we'll have a node for it
              if ( jQuery.inArray(child.ObjectID, scopedStoryIds) > -1 ) {
                var formattedChild = { _reference: child.ObjectID };
                formattedChildren.push(formattedChild);
              }
            }

            var formattedStory = { };
            formattedStory.id = story.ObjectID;
            formattedStory.FormattedID = story.FormattedID;
            formattedStory.Name = story.Name;
            formattedStory.Type = story._type;
            formattedStory.Children = formattedChildren;
            // put in the array
            formattedStories.push(formattedStory);
          }

          var root = { };
          root.id = "-1";
          root.FormattedID = "";
          root.Name = "Stories";
          root.Type = "Root";
          root.Children = rootChildren;

          formattedStories.push( root );

          var storeData = {
            identifier: 'id',
            label: 'Name',
            items: formattedStories
          };

          var store = new dojo.data.ItemFileWriteStore({
            data: storeData
          });

          store.onSet = function(item,attribute,oldValue,newValue) {
            if ( attribute = "Children" ) {
              var oldLength = 0;
              var newLength = 0;
              // weird: we either get null, or a single object, or an array 
              // sometimes even the single item is in an array, sometimes not
              if ( oldValue != null ) {
                if ( ! jQuery.isArray( oldValue ) ) {
                  oldLength = 1;
                  } else {
                  oldLength = oldValue.length;
                }
              }
              if ( newValue != null ) {
                if ( ! jQuery.isArray( newValue ) ) {
                  newLength = 1;
                  } else {
                  newLength = newValue.length;
                }
              }
              if ( oldLength < newLength ) {
                var parentID = item.id;
                var childID = -1;
                if ( newLength == 1 ) {
                  // this is the first child!
                  if ( jQuery.isArray(newValue) ) {
                    childID = newValue[0].id;
                    } else {
                    childID = newValue.id;
                  }
                } else {
                  // we have to figure out which child is the new one
                  if ( ! jQuery.isArray(oldValue) ) {
                    // the old one is only one item
                    
                    for ( var i=0; i<newValue.length; i++ ) {
                      if ( newValue[i]  != oldValue ) {
                        childID = newValue[i].id
                      }
                    }
                  } else {
                    // the old set is an array to cycle through
                    for ( var i=0; i<newValue.length; i++ ) {
                      if ( jQuery.inArray(newValue[i],oldValue) == -1 ) {
                        childID = newValue[i].id
                      }
                    }
                  }
                }
                //alert( parentID + " gets a new kid:  " + childID );
                changeParent(childID,parentID);
              }
            }
          };

          var treeModel = new dijit.tree.TreeStoreModel({
            store: store,
            query: { 
              "Type" : "Root"
            },
            childrenAttrs: ["Children"]
          });

          new dijit.Tree({
            model: treeModel,
            dndController: "dijit.tree.dndSource",
            checkAcceptance: dndAccept,
            checkItemAcceptance: treeAcceptance
          },
          "mashup_box" );

          <!-- when finished, remove the spinner -->
          jQuery("#spinner").remove();
        }

        function runQuery() {
          jQuery("#mashup_box").empty();
          <!-- add spinner -->
          jQuery("#mashup_box").append('<img id="spinner" src="/slm/images/icon_spinner.gif"/>');
          <!-- define query(ies) -->
          var queryArray = new Array();
          queryArray.push( {
            key: 'parents',
            type: 'hierarchicalrequirements',
            query: '( Parent = null )',
            order: 'Rank',
            fetch: 'FormattedID,Name,ObjectID,Children,Parent'
          });
          queryArray.push( {
            key: 'stories',
            type: 'hierarchicalrequirements',
            query: '( Parent != null )',
            order: 'Rank',
            fetch: 'FormattedID,Name,ObjectID,Children'
          });
          
          batchToolkit.findAll(queryArray, populateMashup);
        }
        
        <!-- set up the toolkit -->
        batchToolkit = new RALLY.Mashup.BatchToolkit('__WORKSPACE_OID__', 
          '__PROJECT_OID__',
          '__PROJECT_SCOPING_UP__', 
          '__PROJECT_SCOPING_DOWN__');

        <!-- kick off -->
        runQuery();
      });

    </script>
    <!-- end mashup script -->
  </head>
  <body class="soria">
    <div id="mashup_box" class="mashup_box">
    </div>
    <div id="mashup_messages">
    </div>
  </body>
</html>

